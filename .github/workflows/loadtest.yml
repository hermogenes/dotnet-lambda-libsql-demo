name: Run Load Test

on:
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  AWS_REGION: us-east-1
  LIBSQL_CLIENT_URL: ${{ secrets.LIBSQL_CLIENT_URL }}
  LIBSQL_CLIENT_TOKEN: ${{ secrets.LIBSQL_CLIENT_TOKEN }}
  SAM_CLI_TELEMETRY: 0
  LAMBDA_ARCH: x86_64
  ARTILLERY_DISABLE_TELEMETRY: true

jobs:
  setup-aws:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Task
        uses: arduino/setup-task@v2

      - name: Cleanup AWS SAM stack
        run: task aws-teardown

      - name: Deploy AWS SAM stack
        run: task aws-setup

  setup-libsql:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Task
        uses: arduino/setup-task@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4 
        with:
          node-version: 20.x

      - name: Setup libSQL db
        run: task libsql-setup

  run-libsql-loadtest:
    runs-on: ubuntu-latest
    name: Run libSQL load test
    needs: [setup-aws, setup-libsql]
    outputs:
      start-time: ${{ steps.start-time.outputs.timestamp }}
      half-time: ${{ steps.half-time.outputs.timestamp }}
      end-time: ${{ steps.end-time.outputs.timestamp }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Task
        uses: arduino/setup-task@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4 
        with:
          node-version: 20.x

      - name: Save start time
        id: start-time
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = Math.round(Date.now() / 1000);
            core.setOutput('timestamp', timestamp);

      - name: Run load test
        run: task loadtest FUNCTION=LibSql TEST_FILE=load-test.yml

      - name: Wait 30 sec
        run: sleep 30

      - name: Save half time
        id: half-time
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = Math.round(Date.now() / 1000);
            core.setOutput('timestamp', timestamp);

      - name: Wait 30 sec
        run: sleep 30

      - name: Run readonly load test
        run: task loadtest FUNCTION=LibSql TEST_FILE=load-test-read-only.yml OUTPUT=readonly

      - name: Save end time
        id: end-time
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const timestamp = Math.round(Date.now() / 1000);
            core.setOutput('timestamp', timestamp);
            const queryString = 'filter @type="REPORT" | fields greatest(@initDuration, 0) + @duration as duration, ispresent(@initDuration) as coldstart | stats count(*) as count, min(duration) as min, avg(duration) as avg, pct(duration, 50) as p50, pct(duration, 75) as p75, pct(duration, 90) as p90, pct(duration, 95) as p95, pct(duration, 99) as p99, max(duration) as max by coldstart';
            fs.writeFileSync('./loadtest/results/start-query-phase-1.json', JSON.stringify({
              logGroupName: '/aws/lambda/dotnet-demo-libsql',
              startTime: ${{ steps.start-time.outputs.timestamp }},
              endTime: ${{ steps.half-time.outputs.timestamp }},
              queryString
            }))
            fs.writeFileSync('./loadtest/results/start-query-phase-2.json', JSON.stringify({
              logGroupName: '/aws/lambda/dotnet-demo-libsql',
              startTime: ${{ steps.half-time.outputs.timestamp }},
              endTime: timestamp,
              queryString
            }))

      - name: Wait for 1 minute
        run: sleep 60

      - name: Get Cloudwatch results
        continue-on-error: true
        run: |
          QUERY_ID_PHASE_1=$(aws logs start-query --cli-input-json ./loadtest/results/start-query-phase-1.json --query queryId --output text)
          QUERY_ID_PHASE_2=$(aws logs start-query --cli-input-json ./loadtest/results/start-query-phase-2.json --query queryId --output text)

          sleep 3

          aws logs get-query-results --query-id $QUERY_ID_PHASE_1 > ./loadtest/results/query-results-phase-1.json
          aws logs get-query-results --query-id $QUERY_ID_PHASE_2 > ./loadtest/results/query-results-phase-2.json

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: libsql-loadtest-results
          if-no-files-found: error
          retention-days: 7
          path: ./loadtest/results

  run-dynamodb-loadtest:
    runs-on: ubuntu-latest
    name: Run DynamoDB load test
    needs: [run-libsql-loadtest]
    outputs:
      start-time: ${{ steps.start-time.outputs.timestamp }}
      half-time: ${{ steps.half-time.outputs.timestamp }}
      end-time: ${{ steps.end-time.outputs.timestamp }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Task
        uses: arduino/setup-task@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4 
        with:
          node-version: 20.x

      - name: Save start time
        id: start-time
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = Math.round(Date.now() / 1000);
            core.setOutput('timestamp', timestamp);

      - name: Run load test
        run: task loadtest FUNCTION=DynamoDb TEST_FILE=load-test.yml

      - name: Wait 30 sec
        run: sleep 30

      - name: Save half time
        id: half-time
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = Math.round(Date.now() / 1000);
            core.setOutput('timestamp', timestamp);

      - name: Wait 30 sec
        run: sleep 30

      - name: Run readonly load test
        run: task loadtest FUNCTION=DynamoDb TEST_FILE=load-test-read-only.yml OUTPUT=readonly

      - name: Save end time
        id: end-time
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const timestamp = Math.round(Date.now() / 1000);
            core.setOutput('timestamp', timestamp);
            const queryString = 'filter @type="REPORT" | fields greatest(@initDuration, 0) + @duration as duration, ispresent(@initDuration) as coldstart | stats count(*) as count, min(duration) as min, avg(duration) as avg, pct(duration, 50) as p50, pct(duration, 75) as p75, pct(duration, 90) as p90, pct(duration, 95) as p95, pct(duration, 99) as p99, max(duration) as max by coldstart';
            fs.writeFileSync('./loadtest/results/start-query-phase-1.json', JSON.stringify({
              logGroupName: '/aws/lambda/dotnet-demo-dynamodb',
              startTime: ${{ steps.start-time.outputs.timestamp }},
              endTime: ${{ steps.half-time.outputs.timestamp }},
              queryString
            }))
            fs.writeFileSync('./loadtest/results/start-query-phase-2.json', JSON.stringify({
              logGroupName: '/aws/lambda/dotnet-demo-dynamodb',
              startTime: ${{ steps.half-time.outputs.timestamp }},
              endTime: timestamp,
              queryString
            }))

      - name: Wait for 1 minute
        run: sleep 60

      - name: Get Cloudwatch results
        continue-on-error: true
        run: |
          QUERY_ID_PHASE_1=$(aws logs start-query --cli-input-json ./loadtest/results/start-query-phase-1.json --query queryId --output text)
          QUERY_ID_PHASE_2=$(aws logs start-query --cli-input-json ./loadtest/results/start-query-phase-2.json --query queryId --output text)

          sleep 3

          aws logs get-query-results --query-id $QUERY_ID_PHASE_1 > ./loadtest/results/query-results-phase-1.json
          aws logs get-query-results --query-id $QUERY_ID_PHASE_2 > ./loadtest/results/query-results-phase-2.json

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: dynamodb-loadtest-results
          if-no-files-found: error
          retention-days: 7
          path: ./loadtest/results
